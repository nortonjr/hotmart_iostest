//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 15 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `ic_dehaze`.
    static let ic_dehaze = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dehaze")
    /// Image `ico_afiliados`.
    static let ico_afiliados = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_afiliados")
    /// Image `ico_alert`.
    static let ico_alert = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_alert")
    /// Image `ico_dashboard`.
    static let ico_dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_dashboard")
    /// Image `ico_lupa`.
    static let ico_lupa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_lupa")
    /// Image `ico_mensagem-1`.
    static let ico_mensagem1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_mensagem-1")
    /// Image `ico_mensagem`.
    static let ico_mensagem = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_mensagem")
    /// Image `ico_meus_produtos`.
    static let ico_meus_produtos = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_meus_produtos")
    /// Image `ico_minha_conta`.
    static let ico_minha_conta = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_minha_conta")
    /// Image `ico_minhas_vendas-1`.
    static let ico_minhas_vendas1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_minhas_vendas-1")
    /// Image `ico_minhas_vendas`.
    static let ico_minhas_vendas = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_minhas_vendas")
    /// Image `ico_notificacoes-1`.
    static let ico_notificacoes1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_notificacoes-1")
    /// Image `ico_notificacoes`.
    static let ico_notificacoes = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_notificacoes")
    /// Image `ico_sobre_o_app`.
    static let ico_sobre_o_app = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_sobre_o_app")
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_dehaze", bundle: ..., traitCollection: ...)`
    static func ic_dehaze(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dehaze, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_afiliados", bundle: ..., traitCollection: ...)`
    static func ico_afiliados(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_afiliados, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_alert", bundle: ..., traitCollection: ...)`
    static func ico_alert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_alert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_dashboard", bundle: ..., traitCollection: ...)`
    static func ico_dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_lupa", bundle: ..., traitCollection: ...)`
    static func ico_lupa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_lupa, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_mensagem", bundle: ..., traitCollection: ...)`
    static func ico_mensagem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_mensagem, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_mensagem-1", bundle: ..., traitCollection: ...)`
    static func ico_mensagem1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_mensagem1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_meus_produtos", bundle: ..., traitCollection: ...)`
    static func ico_meus_produtos(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_meus_produtos, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_minha_conta", bundle: ..., traitCollection: ...)`
    static func ico_minha_conta(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_minha_conta, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_minhas_vendas", bundle: ..., traitCollection: ...)`
    static func ico_minhas_vendas(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_minhas_vendas, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_minhas_vendas-1", bundle: ..., traitCollection: ...)`
    static func ico_minhas_vendas1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_minhas_vendas1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_notificacoes", bundle: ..., traitCollection: ...)`
    static func ico_notificacoes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_notificacoes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_notificacoes-1", bundle: ..., traitCollection: ...)`
    static func ico_notificacoes1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_notificacoes1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_sobre_o_app", bundle: ..., traitCollection: ...)`
    static func ico_sobre_o_app(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_sobre_o_app, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `DashboardHeaderCell`.
    static let dashboardHeaderCell = _R.nib._DashboardHeaderCell()
    /// Nib `MessageBubbleCell`.
    static let messageBubbleCell = _R.nib._MessageBubbleCell()
    /// Nib `RecentMessagesCell`.
    static let recentMessagesCell = _R.nib._RecentMessagesCell()
    /// Nib `SaleReceiptCell`.
    static let saleReceiptCell = _R.nib._SaleReceiptCell()
    /// Nib `SalesReceiptsContainerCell`.
    static let salesReceiptsContainerCell = _R.nib._SalesReceiptsContainerCell()
    
    /// `UINib(name: "DashboardHeaderCell", in: bundle)`
    static func dashboardHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dashboardHeaderCell)
    }
    
    /// `UINib(name: "MessageBubbleCell", in: bundle)`
    static func messageBubbleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageBubbleCell)
    }
    
    /// `UINib(name: "RecentMessagesCell", in: bundle)`
    static func recentMessagesCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.recentMessagesCell)
    }
    
    /// `UINib(name: "SaleReceiptCell", in: bundle)`
    static func saleReceiptCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.saleReceiptCell)
    }
    
    /// `UINib(name: "SalesReceiptsContainerCell", in: bundle)`
    static func salesReceiptsContainerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salesReceiptsContainerCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SalesReceiptsContainerCell`.
    static let salesReceiptsContainerCell: Rswift.ReuseIdentifier<SalesReceiptsContainerCell> = Rswift.ReuseIdentifier(identifier: "SalesReceiptsContainerCell")
    /// Reuse identifier `dashboardHeaderCell`.
    static let dashboardHeaderCell: Rswift.ReuseIdentifier<DashboardHeaderCell> = Rswift.ReuseIdentifier(identifier: "dashboardHeaderCell")
    /// Reuse identifier `messageBubbleCell`.
    static let messageBubbleCell: Rswift.ReuseIdentifier<MessageBubbleCell> = Rswift.ReuseIdentifier(identifier: "messageBubbleCell")
    /// Reuse identifier `recentMessagesCell`.
    static let recentMessagesCell: Rswift.ReuseIdentifier<RecentMessagesCell> = Rswift.ReuseIdentifier(identifier: "recentMessagesCell")
    /// Reuse identifier `salesReceiptCell`.
    static let salesReceiptCell: Rswift.ReuseIdentifier<SaleReceiptCell> = Rswift.ReuseIdentifier(identifier: "salesReceiptCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Messages`.
    static let messages = _R.storyboard.messages()
    /// Storyboard `Sales`.
    static let sales = _R.storyboard.sales()
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Messages", bundle: ...)`
    static func messages(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.messages)
    }
    
    /// `UIStoryboard(name: "Sales", bundle: ...)`
    static func sales(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.sales)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DashboardHeaderCell.validate()
    }
    
    struct _DashboardHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DashboardHeaderCell
      
      let bundle = R.hostingBundle
      let identifier = "dashboardHeaderCell"
      let name = "DashboardHeaderCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DashboardHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DashboardHeaderCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ico_lupa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_lupa' is used in nib 'DashboardHeaderCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MessageBubbleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MessageBubbleCell
      
      let bundle = R.hostingBundle
      let identifier = "messageBubbleCell"
      let name = "MessageBubbleCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MessageBubbleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MessageBubbleCell
      }
      
      fileprivate init() {}
    }
    
    struct _RecentMessagesCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RecentMessagesCell
      
      let bundle = R.hostingBundle
      let identifier = "recentMessagesCell"
      let name = "RecentMessagesCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RecentMessagesCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RecentMessagesCell
      }
      
      fileprivate init() {}
    }
    
    struct _SaleReceiptCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SaleReceiptCell
      
      let bundle = R.hostingBundle
      let identifier = "salesReceiptCell"
      let name = "SaleReceiptCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SaleReceiptCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaleReceiptCell
      }
      
      fileprivate init() {}
    }
    
    struct _SalesReceiptsContainerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalesReceiptsContainerCell
      
      let bundle = R.hostingBundle
      let identifier = "SalesReceiptsContainerCell"
      let name = "SalesReceiptsContainerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SalesReceiptsContainerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalesReceiptsContainerCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try messages.validate()
      try home.validate()
      try sales.validate()
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "homeViewController")
      let name = "Home"
      
      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.home().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Home' as 'HomeViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let mainContainerViewController = StoryboardViewControllerResource<MainContainerViewController>(identifier: "mainContainerViewController")
      let name = "Main"
      
      func mainContainerViewController(_: Void = ()) -> MainContainerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainContainerViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().mainContainerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainContainerViewController' could not be loaded from storyboard 'Main' as 'MainContainerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct messages: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let messagesViewController = StoryboardViewControllerResource<MessagesViewController>(identifier: "messagesViewController")
      let name = "Messages"
      
      func messagesViewController(_: Void = ()) -> MessagesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messagesViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.messages().messagesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messagesViewController' could not be loaded from storyboard 'Messages' as 'MessagesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct sales: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Sales"
      let salesViewController = StoryboardViewControllerResource<SalesViewController>(identifier: "SalesViewController")
      
      func salesViewController(_: Void = ()) -> SalesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: salesViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.sales().salesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'salesViewController' could not be loaded from storyboard 'Sales' as 'SalesViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
